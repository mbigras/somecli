#!/usr/bin/env ruby
# somecli

# requiring external code

require 'optparse'
require 'yaml'

# defining variables
# hash data structure
options = {}

# Portable OS path joins
etc_config = File.join('/', 'etc', 'somecli')

# if statements
# checking the local filesystem
if File.exist? etc_config

  # YAML parser
  # Hash manipulation
  options.merge! YAML.load_file(etc_config)
end

# Accessing environment variables
home_config = File.join(ENV['HOME'], '.somecli')
if File.exist? home_config
  options.merge! YAML.load_file(home_config)
end

current_working_directory_config = '.somecli'
if File.exist? current_working_directory_config
  options.merge! YAML.load_file(current_working_directory_config)
end

# Command line options parsing
OptionParser.new do |opts|
  opts.on("-s", "--[no-]switch") do |s|
    options[:switch] = s
  end
  opts.on("-a", "--[no-]another-switch") do |as|
    options[:'another-switch'] = as
  end
  opts.on("-y", "--[no-]yet-another-switch") do |yas|
    options[:'yet-another-switch'] = yas
  end
  opts.on("-y", "--[no-]even-yet-another-switch") do |eyas|
    options[:'even-yet-another-switch'] = eyas
  end
  opts.on("--flag FLAG") do |f|
    options[:flag] = f
  end
end.parse!

# Access to command line arguments
puts "ARGV=#{ARGV.inspect}"
puts "options=#{options.inspect}"
puts "ENV['cats']=#{ENV['cats'].inspect}"

# Checking if reading from an interactive terminal
unless STDIN.tty?

  # Read from STDIN
  puts "STDIN.read=#{STDIN.read.inspect}"
end

# Access to standard error
$stderr.puts "stderr: hello world!"

# Access to standard output
$stdout.puts "stdout: hello world!"

# setting exit status
exit 0